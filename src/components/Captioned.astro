---
const { caption, class: className } = Astro.props;
---

<figure
    class:list={[
        "captioned-figure group hover:scale-[1.12] transition-transform duration-300 bg-background",
        className,
    ]}
>
    <div
        class="border-2 p-0.5 border-black group-hover:shadow-lg transition-shadow"
    >
        <div class="border-2 p-0.5 border-black cursor-pointer">
            <slot />
        </div>
    </div>
    <figcaption class="text-center text-sm mt-2 font-body text-pretty">
        {caption}
    </figcaption>
</figure>

<script>
    const figures = [
        ...document.querySelectorAll(".captioned-figure"),
    ] as HTMLElement[];

    for (const figure of figures) {
        figure.addEventListener("click", () => {
            const img = figure.querySelector("img");
            const video = figure.querySelector("video");
            const caption = figure.querySelector("figcaption")!.textContent;
            const itemStr = img
                ? `<img src="${img.getAttribute("src")!}" alt="" class="object-contain max-h-[90vh] max-w-[90vh] md:max-h-[60vh] w-full" />`
                : `<video src="${video!.getAttribute("src")!}" class="object-contain max-h-[90vh] max-w-[90vh] md:max-h-[60vh] w-full " controls autoplay loop muted playsinline></video>`;

            const modal = document.createElement("div");
            modal.className =
                "fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm flex items-center justify-center z-50 opacity-0";
            modal.innerHTML = `
                <div class="max-w-[90vw] max-h-[90vh] flex flex-wrap gap-8 justify-center">
                    ${itemStr}
                    <div class="mt-2 font-body text-pretty text-white/90 text-center text-3xl flex items-center justify-center gap-2 flex-col px-2 max-w-[30rem]">
                        <p>${caption}</p>
                    </div>
                </div>
            `;

            const remove = () => {
                modal.animate([{ opacity: 1 }, { opacity: 0 }], {
                    duration: 180,
                    fill: "forwards",
                    easing: "ease-out",
                });
                setTimeout(() => {
                    modal.remove();
                }, 200);
                document.removeEventListener("keydown", keydownListener);
            };

            modal.addEventListener("click", (event) => {
                // allow video to be clicked
                if (
                    event?.target &&
                    "nodeName" in event?.target &&
                    event?.target?.nodeName === "VIDEO"
                )
                    return;

                remove();
            });
            // accessibility: on ESC key press, close modal
            const keydownListener = (event: KeyboardEvent) => {
                if (event.key === "Escape") {
                    remove();
                    event.preventDefault();
                }
            };
            document.addEventListener("keydown", keydownListener);
            document.body.appendChild(modal);

            modal.animate([{ opacity: 0 }, { opacity: 1 }], {
                duration: 180,
                fill: "forwards",
                easing: "ease-out",
            });
        });
    }
</script>
